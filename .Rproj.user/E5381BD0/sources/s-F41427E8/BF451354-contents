# alpha <- 4
# distro_name <- "Pareto"
# FUNCDF_rv <-function(x1){pPareto(x1, 1, alpha)}
# FUNPDF_rv <- function(x2){dPareto(x2, 1, alpha)}
# FUNSample_rv <- function(num_obs){rPareto(n = num_obs,1,alpha)}

r_val <- 4
distro_name <- "Beta"
shape1 <- 6
shape2 <- 6
FUNCDF_rv <-function(x1){pbeta(x1, shape1 = shape1, shape2 = shape2)}
FUNPDF_rv <- function(x2){dbeta(x2, shape1 = shape1, shape2 = shape2)}
FUNSample_rv <- function(num_obs){rbeta(n = num_obs,shape1 = shape1, shape2 = shape2)}

runs <- 5

exp_val <- (2*r_val+1)/2

all_res <- data.frame()

# for 7/2 seq(10,40,5))
# for 9/2 seq(20,30,2))

microbenchmark::microbenchmark({
  for (N_current in seq(40,42,by=2)) {
    print(N_current)
    n_obs_curr <- round(N_current^exp_val)
    print(n_obs_curr)

    current_df <- calculate_GH_MISE(dist_title = distro_name ,method_title="Hermite",runs=runs,num_obs=n_obs_curr,FUNSample_rv=FUNSample_rv,FUNCDF_rv=FUNCDF_rv,FUNPDF_rv=FUNPDF_rv,N_inpt = N_current)
    all_res <- rbind(all_res,current_df)
  }
},times=1)

all_res <- all_res %>% mutate(l_n = log(round(param^exp_val)))

all_res <- all_res %>% arrange(param)

# readr::write_csv(all_res,"C:\\Users\\Mike\\Desktop\\Stats code\\stats\\thesisUpdates\\all_res.csv")

all_res <- readr::read_csv("./Desktop/R Code/Statistics Research/stats/thesisUpdates/all_res.csv")

#     print(current_df)
#     all_res <- rbind(all_res,current_df)
#   }
# },times=1)
# all_res <- all_res%>% mutate( l_n = log(round(param^exp_val)))


ggplot(all_res[1:(nrow(all_res)),],aes(x=l_n,y=l_MISE)) +geom_point() + geom_smooth(method="lm")

fit <- lm(l_MISE ~ l_n,all_res[1:((nrow(all_res))),])
summary(fit)

comparison_val <- -2*(r_val-2)/(2*r_val+1)


# slope_val <- as.numeric(fit$coefficients[2])
# intercept_vals <- seq(100,-100,by=-0.001)
# for (intercept_val in intercept_vals) {
#
#   calc_val <- intercept_val + all_res$l_n * slope_val
#   actual_val <- all_res$l_MISE
#
#   # print(calc_val)
#   # print(actual_val)
#
#   if (any(actual_val>=calc_val)){
#     print(sum(actual_val>=calc_val))
#     break
#   }
#
# }
# intercept_val <-intercept_val + 0.001


slope_val_comp <- comparison_val
intercept_vals <- seq(100,-100,by=-0.001)
for (intercept_val_comp in intercept_vals) {

  calc_val <- intercept_val_comp + all_res$l_n * slope_val_comp
  actual_val <- all_res$l_MISE

  # print(calc_val)
  # print(actual_val)

  if (any(actual_val>=calc_val)){
    print(sum(actual_val>=calc_val))
    break
  }

}
intercept_val_comp <-intercept_val_comp + 0.02


p <- ggplot(all_res,aes(x=l_n,y=l_MISE)) + geom_point() + geom_smooth(method="lm",se=F, aes(color="blue"), size=0.5)
p <- p + geom_abline(aes(slope=comparison_val,intercept = intercept_val_comp,color= "springgreen2"),show.legend = F) +
  scale_colour_manual(name="",labels = c("Best-Fit", "Theoretical Upper Bound"),
                      values = c("blue", "springgreen2"))+ xlab("Log(n)") + ylab("Log(MISE)") + ggtitle("Log(MISE) versus Log(n) for Beta(6,6) Distribution")
direct.label(p)
# direct.label(p,"last.qp")

N<- seq(18,40,2)
df <- data.frame(N, n= round(N^(9/2)))
colnames(df) <- c("N(n)","n")
xtable::xtable(df,digits=0)

# all_res_full <- all_res

lm1 <- lm(formula = l_MISE ~ bs(l_n, df = NULL, knots = c(14.68,15.42), degree = 1),
          data    = all_res)

newdat <- data.frame(l_n = seq(from = min(all_res$l_n), to = max(all_res$l_n), by = 0.01))
## Predict
newdat$l_MISE <- predict(lm1, newdata = newdat)

newdat <- newdat %>% mutate(period=ifelse(l_n<14.68,rep("p",nrow(newdat)), ifelse(l_n>=14.68 & l_n <15.42, rep("l",nrow(newdat)),rep("a",nrow(newdat)))))


all_res <- all_res %>% mutate(period=c("p","p","p","p","l","l","l","a","a","a","a","a"))
p <- ggplot(all_res,mapping = aes(x=l_n,y=l_MISE,color=period)) + geom_point() + geom_errorbar(aes(ymin=l_MISE-std_err_l_MISE, ymax=l_MISE+std_err_l_MISE), width=.04)  +geom_text_repel(size=3,aes(label=paste("N=",param))) +geom_abline(aes(slope=comparison_val,intercept = intercept_val_comp),name="Theoretical Upper Bound")  + xlab("Log(n)") + ylab("Log(MISE)") + ggtitle("Log(MISE) versus Log(n) for Beta(6,6) Distribution")+ theme(legend.position = "none") 
p+ geom_text(x=16.18, y=-5.8, label="Theoretical Upper Bound", color="black") + geom_line(data=newdat,aes(x=l_n,y=l_MISE))