# Generated by using Rcpp::compileAttributes() -> do not edit by hand
# Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#' This function outputs normalization factors that, when multiplied by 
#' the Physicist Hermite polynomials H_k(x), yield orthonormal 
#' Hermite functions h_k(x) for k=0,...,N.
#'
#' @param N An integer number.
#' @return A numeric vector of length N+1
#' @export
#' @examples
#' hermite_normalization(10)
hermite_normalization <- function(N) {
    .Call(`_hermiter_hermite_normalization`, N)
}

#' This function outputs orthonormal Hermite functions, h_k(x) from k=0,...,N 
#' for the vector of values, x.
#'
#' @param N An integer number.
#' @param x A numeric vector.
#' @param normalization A numeric vector of normalization factors generated by
#' the hermite_normalization function.
#' @return A numeric matrix with N+1 rows and length(x) columns.
#' @export
#' @examples
#' hermite_function(10, x=c(1,2,3), hermite_normalization(10))
hermite_function <- function(N, x, normalization) {
    .Call(`_hermiter_hermite_function`, N, x, normalization)
}

hermite_integral_val <- function(N, x, hermite_function_mat) {
    .Call(`_hermiter_hermite_integral_val`, N, x, hermite_function_mat)
}

hermite_integral_val_quantile_adap <- function(N, x, hermite_function_mat) {
    .Call(`_hermiter_hermite_integral_val_quantile_adap`, N, x, hermite_function_mat)
}

normalizeInputs <- function(x, n_obs, current_mean, current_var) {
    .Call(`_hermiter_normalizeInputs`, x, n_obs, current_mean, current_var)
}

normalizeInputsEW <- function(x, n_obs, lambda, current_mean, current_var) {
    .Call(`_hermiter_normalizeInputsEW`, x, n_obs, lambda, current_mean, current_var)
}

