useDynLib("hermiter", .registration=TRUE)
importFrom(Rcpp, evalCpp)
importFrom(RcppParallel, RcppParallelLibs)
importFrom("methods", "is")
S3method(merge_hermite,list)
S3method(merge_pair,hermite_estimator_univar)
S3method(cum_prob,hermite_estimator_univar)
S3method(dens,hermite_estimator_univar)
S3method(quant,hermite_estimator_univar)
S3method(quant,hermite_estimator_bivar)
S3method(calculate_running_std,hermite_estimator_univar)
S3method(calculate_running_std,hermite_estimator_bivar)
S3method(update_sequential,hermite_estimator_univar)
S3method(spearmans,hermite_estimator_bivar)
S3method(kendall,hermite_estimator_bivar)
S3method(spearmans,hermite_estimator_univar)
S3method(kendall,hermite_estimator_univar)
S3method(cum_prob,hermite_estimator_bivar)
S3method(dens,hermite_estimator_bivar)
S3method(update_sequential,hermite_estimator_bivar)
S3method(merge_pair,hermite_estimator_bivar)
S3method(summary,hermite_estimator_univar)
S3method(print,hermite_estimator_univar)
S3method(summary,hermite_estimator_bivar)
S3method(print,hermite_estimator_bivar)
export(hermite_estimator)
export(update_sequential)
export(merge_hermite)
export(merge_pair)
export(cum_prob)
export(dens)
export(quant)
export(spearmans)
export(kendall)
export(hermite_normalization_N)
export(hermite_function_N)
export(hermite_function_sum_N)
export(hermite_polynomial_N)
export(hermite_int_lower)
export(hermite_int_upper)
export(hermite_int_full)