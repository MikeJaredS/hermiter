actual_quantiles_logis <- qlogis(p)
actual_quantiles_norm <- qnorm(p)
res <- data.frame()
res_q <- data.frame()
for (idx in c(1:length(test))) {
h_est <- h_est %>% update_sequential(test[idx])
if (idx %% 100 == 0){
if (floor(idx/num_obs)==0){
actual_cdf_vals <- actual_cdf_lognorm
actual_pdf_vals <-actual_pdf_lognorm
actual_quantile_vals <- actual_quantiles_lognorm
}
if (floor(idx/num_obs)==1){
actual_cdf_vals <- actual_cdf_logis
actual_pdf_vals <-actual_pdf_logis
actual_quantile_vals <- actual_quantiles_logis
}
if (floor(idx/num_obs)==2){
actual_cdf_vals <- actual_cdf_norm
actual_pdf_vals <- actual_pdf_norm
actual_quantile_vals <- actual_quantiles_norm
}
idx_vals <- rep(count,length(x))
cdf_est_vals <- h_est %>% cum_prob(x, clipped=T)
pdf_est_vals <- h_est %>% dens(x, clipped=T)
quantile_est_vals <- h_est %>% quant(p)
res <- rbind(res,data.frame(idx_vals,x,cdf_est_vals,actual_cdf_vals,pdf_est_vals,actual_pdf_vals))
res_q <- rbind(res_q,data.frame(idx_vals=rep(count,length(p)),p,quantile_est_vals,actual_quantile_vals))
count <- count +1
}
}
res <- res %>% mutate(idx_vals=idx_vals*100)
library(magittr)
library(magrittr)
library(hermiter)
num_obs <-2000
test <- rlnorm(num_obs)
test <- c(test,rlogis(num_obs))
test <- c(test,rnorm(num_obs))
h_est <- hermite_estimator(N=20,normalize = T,exp_weight_lambda = 0.0075)
count <- 1
x <- seq(-10,10,by=0.1)
actual_cdf_lognorm <- plnorm(x)
actual_cdf_logis <- plogis(x)
actual_cdf_norm <- pnorm(x)
actual_pdf_lognorm <- dlnorm(x)
actual_pdf_logis <- dlogis(x)
actual_pdf_norm <- dnorm(x)
p <- seq(0.05,0.95,by=0.05)
actual_quantiles_lognorm <- qlnorm(p)
actual_quantiles_logis <- qlogis(p)
actual_quantiles_norm <- qnorm(p)
res <- data.frame()
res_q <- data.frame()
for (idx in c(1:length(test))) {
h_est <- h_est %>% update_sequential(test[idx])
if (idx %% 100 == 0){
if (floor(idx/num_obs)==0){
actual_cdf_vals <- actual_cdf_lognorm
actual_pdf_vals <-actual_pdf_lognorm
actual_quantile_vals <- actual_quantiles_lognorm
}
if (floor(idx/num_obs)==1){
actual_cdf_vals <- actual_cdf_logis
actual_pdf_vals <-actual_pdf_logis
actual_quantile_vals <- actual_quantiles_logis
}
if (floor(idx/num_obs)==2){
actual_cdf_vals <- actual_cdf_norm
actual_pdf_vals <- actual_pdf_norm
actual_quantile_vals <- actual_quantiles_norm
}
idx_vals <- rep(count,length(x))
cdf_est_vals <- h_est %>% cum_prob(x, clipped=T)
pdf_est_vals <- h_est %>% dens(x, clipped=T)
quantile_est_vals <- h_est %>% quant(p)
res <- rbind(res,data.frame(idx_vals,x,cdf_est_vals,actual_cdf_vals,pdf_est_vals,actual_pdf_vals))
res_q <- rbind(res_q,data.frame(idx_vals=rep(count,length(p)),p,quantile_est_vals,actual_quantile_vals))
count <- count +1
}
}
res <- res %>% mutate(idx_vals=idx_vals*100)
library(dplyr)
num_obs <-2000
test <- rlnorm(num_obs)
test <- c(test,rlogis(num_obs))
test <- c(test,rnorm(num_obs))
h_est <- hermite_estimator(N=20,normalize = T,exp_weight_lambda = 0.0075)
count <- 1
x <- seq(-10,10,by=0.1)
actual_cdf_lognorm <- plnorm(x)
actual_cdf_logis <- plogis(x)
actual_cdf_norm <- pnorm(x)
actual_pdf_lognorm <- dlnorm(x)
actual_pdf_logis <- dlogis(x)
actual_pdf_norm <- dnorm(x)
p <- seq(0.05,0.95,by=0.05)
actual_quantiles_lognorm <- qlnorm(p)
actual_quantiles_logis <- qlogis(p)
actual_quantiles_norm <- qnorm(p)
res <- data.frame()
res_q <- data.frame()
for (idx in c(1:length(test))) {
h_est <- h_est %>% update_sequential(test[idx])
if (idx %% 100 == 0){
if (floor(idx/num_obs)==0){
actual_cdf_vals <- actual_cdf_lognorm
actual_pdf_vals <-actual_pdf_lognorm
actual_quantile_vals <- actual_quantiles_lognorm
}
if (floor(idx/num_obs)==1){
actual_cdf_vals <- actual_cdf_logis
actual_pdf_vals <-actual_pdf_logis
actual_quantile_vals <- actual_quantiles_logis
}
if (floor(idx/num_obs)==2){
actual_cdf_vals <- actual_cdf_norm
actual_pdf_vals <- actual_pdf_norm
actual_quantile_vals <- actual_quantiles_norm
}
idx_vals <- rep(count,length(x))
cdf_est_vals <- h_est %>% cum_prob(x, clipped=T)
pdf_est_vals <- h_est %>% dens(x, clipped=T)
quantile_est_vals <- h_est %>% quant(p)
res <- rbind(res,data.frame(idx_vals,x,cdf_est_vals,actual_cdf_vals,pdf_est_vals,actual_pdf_vals))
res_q <- rbind(res_q,data.frame(idx_vals=rep(count,length(p)),p,quantile_est_vals,actual_quantile_vals))
count <- count +1
}
}
res <- res %>% mutate(idx_vals=idx_vals*100)
library(hermiter)
num_obs <-2000
test <- rlnorm(num_obs)
test <- c(test,rlogis(num_obs))
test <- c(test,rnorm(num_obs))
h_est <- hermite_estimator(N=20,normalize = T,exp_weight_lambda = 0.0075)
count <- 1
x <- seq(-10,10,by=0.1)
actual_cdf_lognorm <- plnorm(x)
actual_cdf_logis <- plogis(x)
actual_cdf_norm <- pnorm(x)
actual_pdf_lognorm <- dlnorm(x)
actual_pdf_logis <- dlogis(x)
actual_pdf_norm <- dnorm(x)
p <- seq(0.05,0.95,by=0.05)
actual_quantiles_lognorm <- qlnorm(p)
actual_quantiles_logis <- qlogis(p)
actual_quantiles_norm <- qnorm(p)
res <- data.frame()
res_q <- data.frame()
for (idx in c(1:length(test))) {
h_est <- h_est %>% update_sequential(test[idx])
if (idx %% 100 == 0){
if (floor(idx/num_obs)==0){
actual_cdf_vals <- actual_cdf_lognorm
actual_pdf_vals <-actual_pdf_lognorm
actual_quantile_vals <- actual_quantiles_lognorm
}
if (floor(idx/num_obs)==1){
actual_cdf_vals <- actual_cdf_logis
actual_pdf_vals <-actual_pdf_logis
actual_quantile_vals <- actual_quantiles_logis
}
if (floor(idx/num_obs)==2){
actual_cdf_vals <- actual_cdf_norm
actual_pdf_vals <- actual_pdf_norm
actual_quantile_vals <- actual_quantiles_norm
}
idx_vals <- rep(count,length(x))
cdf_est_vals <- h_est %>% cum_prob(x, clipped=T)
pdf_est_vals <- h_est %>% dens(x, clipped=T)
quantile_est_vals <- h_est %>% quant(p)
res <- rbind(res,data.frame(idx_vals,x,cdf_est_vals,actual_cdf_vals,pdf_est_vals,actual_pdf_vals))
res_q <- rbind(res_q,data.frame(idx_vals=rep(count,length(p)),p,quantile_est_vals,actual_quantile_vals))
count <- count +1
}
}
res <- res %>% mutate(idx_vals=idx_vals*100)
p <- ggplot(res_q) + geom_point(aes(x=actual_quantile_vals,y=quantile_est_vals)) +geom_abline(slope=1,intercept = 0) +transition_states(idx_vals,
transition_length = 2,
state_length = 1)
animate(p, renderer = gifski_renderer(file="C:\\data\\gifout_quant.gif"))
library(gganimate)
p <- ggplot(res_q) + geom_point(aes(x=actual_quantile_vals,y=quantile_est_vals)) +geom_abline(slope=1,intercept = 0) +transition_states(idx_vals,
transition_length = 2,
state_length = 1)
animate(p, renderer = gifski_renderer(file="C:\\data\\gifout_quant.gif"))
res_q
h_est$coeff_vec
h_est$N_param
h_est$num_obs
h_est$num_obs
h_est$running_mean
h_est$running_variance
library(hermiter)
num_obs <-2000
test <- rlnorm(num_obs)
test <- c(test,rlogis(num_obs))
test <- c(test,rnorm(num_obs))
h_est <- hermite_estimator(N=20,normalize = T,exp_weight_lambda = 0.0075)
count <- 1
x <- seq(-10,10,by=0.1)
actual_cdf_lognorm <- plnorm(x)
actual_cdf_logis <- plogis(x)
actual_cdf_norm <- pnorm(x)
actual_pdf_lognorm <- dlnorm(x)
actual_pdf_logis <- dlogis(x)
actual_pdf_norm <- dnorm(x)
p <- seq(0.05,0.95,by=0.05)
actual_quantiles_lognorm <- qlnorm(p)
actual_quantiles_logis <- qlogis(p)
actual_quantiles_norm <- qnorm(p)
res <- data.frame()
res_q <- data.frame()
for (idx in c(1:length(test))) {
h_est <- h_est %>% update_sequential(test[idx])
if (idx %% 100 == 0){
if (floor(idx/num_obs)==0){
actual_cdf_vals <- actual_cdf_lognorm
actual_pdf_vals <-actual_pdf_lognorm
actual_quantile_vals <- actual_quantiles_lognorm
}
if (floor(idx/num_obs)==1){
actual_cdf_vals <- actual_cdf_logis
actual_pdf_vals <-actual_pdf_logis
actual_quantile_vals <- actual_quantiles_logis
}
if (floor(idx/num_obs)==2){
actual_cdf_vals <- actual_cdf_norm
actual_pdf_vals <- actual_pdf_norm
actual_quantile_vals <- actual_quantiles_norm
}
idx_vals <- rep(count,length(x))
cdf_est_vals <- h_est %>% cum_prob(x, clipped=T)
pdf_est_vals <- h_est %>% dens(x, clipped=T)
quantile_est_vals <- h_est %>% quant(p)
res <- rbind(res,data.frame(idx_vals,x,cdf_est_vals,actual_cdf_vals,pdf_est_vals,actual_pdf_vals))
res_q <- rbind(res_q,data.frame(idx_vals=rep(count,length(p)),p,quantile_est_vals,actual_quantile_vals))
count <- count +1
}
}
res <- res %>% mutate(idx_vals=idx_vals*100)
res_q <- res_q %>% mutate(idx_vals=idx_vals*100)
res_q
p <- ggplot(res_q) + geom_point(aes(x=actual_quantile_vals,y=quantile_est_vals)) +geom_abline(slope=1,intercept = 0) +transition_states(idx_vals,
transition_length = 2,
state_length = 1)
animate(p, renderer = gifski_renderer(file="C:\\data\\gifout_quant.gif"))
animate(p,renderer = ffmpeg_renderer(format = "webm"))
library(ffmeg)
library(av)
install.packages(av)
install.packages("av")
library(av)
animate(p,renderer = ffmpeg_renderer(format = "webm"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# set.seed(10)
library(hermiter)
library(magrittr)
library(ggplot2)
library(dplyr)
library(data.table)
library(gifski)
library(gganimate)
hermite_est <- hermite_estimator(N=10, normalize=TRUE)
observations <- rlogis(n=1000)
hermite_est <- hermite_estimator(N=10, normalize=TRUE)
hermite_est <- update_batch(hermite_est,observations)
observations <- rlogis(n=1000)
hermite_est <- hermite_estimator(N=10, normalize=TRUE)
hermite_est <- hermite_est %>% update_batch(observations)
x <- seq(-15,15,0.1)
pdf_est <- dens(hermite_est,x)
cdf_est <- cum_prob(hermite_est,x)
p <- seq(0.05,1,0.05)
quantile_est <- quant(hermite_est,p)
x <- seq(-15,15,0.1)
pdf_est <- hermite_est %>% dens(x)
cdf_est <- hermite_est %>% cum_prob(x)
p <- seq(0.05,0.95,0.05)
quantile_est <- hermite_est %>% quant(p)
actual_pdf <- dlogis(x)
actual_cdf <- plogis(x)
df_pdf_cdf <- data.frame(x,pdf_est,cdf_est,actual_pdf,actual_cdf)
actual_quantiles <- qlogis(p)
df_quant <- data.frame(p,quantile_est,actual_quantiles)
ggplot(df_pdf_cdf) + geom_line(aes(x=x, y=pdf_est), colour="blue") + geom_line(aes(x=x,y=actual_pdf))
ggplot(df_pdf_cdf) + geom_line(aes(x=x, y=cdf_est), colour="blue") + geom_line(aes(x=x,y=actual_cdf))
ggplot(df_quant) + geom_point(aes(x=actual_quantiles, y=quantile_est)) + geom_abline(slope=1,intercept = 0)
# Create Test Data
test_data <- data.frame()
for (i in c(1:5)) {
exponential_data <- rexp(n=1000)
logistic_data <- rlogis(n=1000)
logn_data <- rlnorm(n=1000)
test_data <- rbind(test_data,data.frame(dist_name=rep("exponential",length(exponential_data)),idx=i,observations=exponential_data))
test_data <- rbind(test_data,data.frame(dist_name=rep("logistic",length(logistic_data)),idx=i,observations=logistic_data))
test_data <- rbind(test_data,data.frame(dist_name=rep("lognormal",length(logn_data)),idx=i,observations=logn_data))
}
# Group observations by distribution and idx and create Hermite estimator
estimates <- test_data %>% group_by(dist_name,idx) %>% summarise(hermest = list(hermite_estimator(N=10,normalize = TRUE) %>% update_batch(observations)))
# Group observations by distribution and combine Hermite estimators
combined_estimates <- estimates %>% group_by(dist_name) %>% summarise(herm_comb = list(combine_hermite(hermest)))
# Create Test Data
test_data <- data.frame()
for (i in c(1:5)) {
exponential_data <- rexp(n=1000)
logistic_data <- rlogis(n=1000)
logn_data <- rlnorm(n=1000)
test_data <- rbind(test_data,data.frame(dist_name=rep("exponential",length(exponential_data)),idx=i,observations=exponential_data))
test_data <- rbind(test_data,data.frame(dist_name=rep("logistic",length(logistic_data)),idx=i,observations=logistic_data))
test_data <- rbind(test_data,data.frame(dist_name=rep("lognormal",length(logn_data)),idx=i,observations=logn_data))
}
# Group observations by distribution and idx and create Hermite estimator
estimates <- test_data %>% group_by(dist_name,idx) %>% summarise(hermest = list(hermite_estimator(N=10,normalize = TRUE) %>% update_batch(observations)))
# Group observations by distribution and combine Hermite estimators
combined_estimates <- estimates %>% group_by(dist_name) %>% summarise(herm_comb = list(combine_hermite(hermest)))
num_obs <-2000
test <- rlnorm(num_obs)
test <- c(test,rlogis(num_obs))
test <- c(test,rnorm(num_obs))
h_est <- hermite_estimator(N=20,normalize = T,exp_weight_lambda = 0.0075)
count <- 1
x <- seq(-10,10,by=0.1)
actual_cdf_lognorm <- plnorm(x)
actual_cdf_logis <- plogis(x)
actual_cdf_norm <- pnorm(x)
actual_pdf_lognorm <- dlnorm(x)
actual_pdf_logis <- dlogis(x)
actual_pdf_norm <- dnorm(x)
p <- seq(0.05,0.95,by=0.05)
actual_quantiles_lognorm <- qlnorm(p)
actual_quantiles_logis <- qlogis(p)
actual_quantiles_norm <- qnorm(p)
res <- data.frame()
res_q <- data.frame()
for (idx in c(1:length(test))) {
h_est <- h_est %>% update_sequential(test[idx])
if (idx %% 100 == 0){
if (floor(idx/num_obs)==0){
actual_cdf_vals <- actual_cdf_lognorm
actual_pdf_vals <-actual_pdf_lognorm
actual_quantile_vals <- actual_quantiles_lognorm
}
if (floor(idx/num_obs)==1){
actual_cdf_vals <- actual_cdf_logis
actual_pdf_vals <-actual_pdf_logis
actual_quantile_vals <- actual_quantiles_logis
}
if (floor(idx/num_obs)==2){
actual_cdf_vals <- actual_cdf_norm
actual_pdf_vals <- actual_pdf_norm
actual_quantile_vals <- actual_quantiles_norm
}
idx_vals <- rep(count,length(x))
cdf_est_vals <- h_est %>% cum_prob(x, clipped=T)
pdf_est_vals <- h_est %>% dens(x, clipped=T)
quantile_est_vals <- h_est %>% quant(p)
res <- rbind(res,data.frame(idx_vals,x,cdf_est_vals,actual_cdf_vals,pdf_est_vals,actual_pdf_vals))
res_q <- rbind(res_q,data.frame(idx_vals=rep(count,length(p)),p,quantile_est_vals,actual_quantile_vals))
count <- count +1
}
}
res <- res %>% mutate(idx_vals=idx_vals*100)
res_q <- res_q %>% mutate(idx_vals=idx_vals*100)
p <- ggplot(res) + geom_line(aes(x=x,y=cdf_est_vals), colour="green") + geom_line(aes(x=x,y=actual_cdf_vals)) +transition_states(idx_vals,
transition_length = 2,
state_length = 1)+ ggtitle('Observation index {closest_state}')
anim_save("C:\\data\\cdf.gif", p)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# set.seed(10)
library(hermiter)
library(magrittr)
library(ggplot2)
library(dplyr)
library(data.table)
library(gifski)
library(gganimate)
hermite_est <- hermite_estimator(N=10, normalize=TRUE)
observations <- rlogis(n=1000)
hermite_est <- hermite_estimator(N=10, normalize=TRUE)
hermite_est <- update_batch(hermite_est,observations)
observations <- rlogis(n=1000)
hermite_est <- hermite_estimator(N=10, normalize=TRUE)
hermite_est <- hermite_est %>% update_batch(observations)
x <- seq(-15,15,0.1)
pdf_est <- dens(hermite_est,x)
cdf_est <- cum_prob(hermite_est,x)
p <- seq(0.05,1,0.05)
quantile_est <- quant(hermite_est,p)
x <- seq(-15,15,0.1)
pdf_est <- hermite_est %>% dens(x)
cdf_est <- hermite_est %>% cum_prob(x)
p <- seq(0.05,0.95,0.05)
quantile_est <- hermite_est %>% quant(p)
actual_pdf <- dlogis(x)
actual_cdf <- plogis(x)
df_pdf_cdf <- data.frame(x,pdf_est,cdf_est,actual_pdf,actual_cdf)
actual_quantiles <- qlogis(p)
df_quant <- data.frame(p,quantile_est,actual_quantiles)
ggplot(df_pdf_cdf) + geom_line(aes(x=x, y=pdf_est), colour="blue") + geom_line(aes(x=x,y=actual_pdf))
ggplot(df_pdf_cdf) + geom_line(aes(x=x, y=cdf_est), colour="blue") + geom_line(aes(x=x,y=actual_cdf))
ggplot(df_quant) + geom_point(aes(x=actual_quantiles, y=quantile_est)) + geom_abline(slope=1,intercept = 0)
# Create Test Data
test_data <- data.frame()
for (i in c(1:5)) {
exponential_data <- rexp(n=1000)
logistic_data <- rlogis(n=1000)
logn_data <- rlnorm(n=1000)
test_data <- rbind(test_data,data.frame(dist_name=rep("exponential",length(exponential_data)),idx=i,observations=exponential_data))
test_data <- rbind(test_data,data.frame(dist_name=rep("logistic",length(logistic_data)),idx=i,observations=logistic_data))
test_data <- rbind(test_data,data.frame(dist_name=rep("lognormal",length(logn_data)),idx=i,observations=logn_data))
}
# Group observations by distribution and idx and create Hermite estimator
estimates <- test_data %>% group_by(dist_name,idx) %>% summarise(hermest = list(hermite_estimator(N=10,normalize = TRUE) %>% update_batch(observations)))
# Group observations by distribution and combine Hermite estimators
combined_estimates <- estimates %>% group_by(dist_name) %>% summarise(herm_comb = list(combine_hermite(hermest)))
# Create Test Data
test_data <- data.frame()
for (i in c(1:5)) {
exponential_data <- rexp(n=1000)
logistic_data <- rlogis(n=1000)
logn_data <- rlnorm(n=1000)
test_data <- rbind(test_data,data.frame(dist_name=rep("exponential",length(exponential_data)),idx=i,observations=exponential_data))
test_data <- rbind(test_data,data.frame(dist_name=rep("logistic",length(logistic_data)),idx=i,observations=logistic_data))
test_data <- rbind(test_data,data.frame(dist_name=rep("lognormal",length(logn_data)),idx=i,observations=logn_data))
}
# Group observations by distribution and idx and create Hermite estimator
estimates <- test_data %>% group_by(dist_name,idx) %>% summarise(hermest = list(hermite_estimator(N=10,normalize = TRUE) %>% update_batch(observations)))
# Group observations by distribution and combine Hermite estimators
combined_estimates <- estimates %>% group_by(dist_name) %>% summarise(herm_comb = list(combine_hermite(hermest)))
num_obs <-2000
test <- rlnorm(num_obs)
test <- c(test,rlogis(num_obs))
test <- c(test,rnorm(num_obs))
h_est <- hermite_estimator(N=20,normalize = T,exp_weight_lambda = 0.0075)
count <- 1
x <- seq(-10,10,by=0.1)
actual_cdf_lognorm <- plnorm(x)
actual_cdf_logis <- plogis(x)
actual_cdf_norm <- pnorm(x)
actual_pdf_lognorm <- dlnorm(x)
actual_pdf_logis <- dlogis(x)
actual_pdf_norm <- dnorm(x)
p <- seq(0.05,0.95,by=0.05)
actual_quantiles_lognorm <- qlnorm(p)
actual_quantiles_logis <- qlogis(p)
actual_quantiles_norm <- qnorm(p)
res <- data.frame()
res_q <- data.frame()
for (idx in c(1:length(test))) {
h_est <- h_est %>% update_sequential(test[idx])
if (idx %% 100 == 0){
if (floor(idx/num_obs)==0){
actual_cdf_vals <- actual_cdf_lognorm
actual_pdf_vals <-actual_pdf_lognorm
actual_quantile_vals <- actual_quantiles_lognorm
}
if (floor(idx/num_obs)==1){
actual_cdf_vals <- actual_cdf_logis
actual_pdf_vals <-actual_pdf_logis
actual_quantile_vals <- actual_quantiles_logis
}
if (floor(idx/num_obs)==2){
actual_cdf_vals <- actual_cdf_norm
actual_pdf_vals <- actual_pdf_norm
actual_quantile_vals <- actual_quantiles_norm
}
idx_vals <- rep(count,length(x))
cdf_est_vals <- h_est %>% cum_prob(x, clipped=T)
pdf_est_vals <- h_est %>% dens(x, clipped=T)
quantile_est_vals <- h_est %>% quant(p)
res <- rbind(res,data.frame(idx_vals,x,cdf_est_vals,actual_cdf_vals,pdf_est_vals,actual_pdf_vals))
res_q <- rbind(res_q,data.frame(idx_vals=rep(count,length(p)),p,quantile_est_vals,actual_quantile_vals))
count <- count +1
}
}
res <- res %>% mutate(idx_vals=idx_vals*100)
res_q <- res_q %>% mutate(idx_vals=idx_vals*100)
p <- ggplot(res) + geom_line(aes(x=x,y=pdf_est_vals), colour="green") + geom_line(aes(x=x,y=actual_pdf_vals)) +transition_states(idx_vals,
transition_length = 2,
state_length = 1)
anim_save("pdf.gif",p)
p <- ggplot(res_q) + geom_point(aes(x=actual_quantile_vals,y=quantile_est_vals)) +geom_abline(slope=1,intercept = 0) +transition_states(idx_vals,
transition_length = 2,
state_length = 1)
anim_save("quant.gif",p)
devtools::document()
devtools::check()
install.packages("gifski")
install.packages("gganimate")
install.packages("DT")
devtools::check()
install.packages("qpdf")
devtools::check()
library(qpdf)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
devtools::check()
Sys.getenv("PATH")
